name: New Post Notification

on:
  push:
    paths:
      - 'data/blog/**/*.mdx'  # 블로그 글 파일 변경 감지
    branches:
      - main

jobs:
  notify-new-post:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # 이전 커밋과 비교하기 위해

      - name: Check for new blog posts
        id: check_new_posts
        run: |
          # ... (기존 스크립트 내용)

          if [ -z "$JSON_OBJECTS" ]; then
            echo "발행 가능한 새 글이 없습니다 (모두 초안)."
            echo "has_new_posts=false" >> $GITHUB_OUTPUT
          else
            # 모든 JSON 객체를 하나의 배열로 합치고 최종 payload로 래핑 (컴팩트 모드)
            FINAL_PAYLOAD=$(echo "$JSON_OBJECTS" | jq -c -s '{"posts": .}')
            
            echo "생성된 최종 페이로드:"
            echo "$FINAL_PAYLOAD"

            echo "has_new_posts=true" >> $GITHUB_OUTPUT
            echo "final_payload<<EOF" >> $GITHUB_OUTPUT
            echo "$FINAL_PAYLOAD" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Store new post info to KV
        if: steps.check_new_posts.outputs.has_new_posts == 'true'
        env:
          PAYLOAD: ${{ steps.check_new_posts.outputs.final_payload }}
        run: |
          echo "새 글 정보를 KV에 저장 중..."
          echo "전달받은 페이로드:"
          echo "$PAYLOAD"
          
          # KV에 새 글 정보 저장
          RESPONSE=$(curl -s -w "%{\http_code}" -X POST "${{ secrets.DEPLOYMENT_URL || 'https://frogsoo.vercel.app' }}/api/kv/store-new-post" 
            -H "Content-Type: application/json" 
            -H "Authorization: Bearer ${{ secrets.WEBHOOK_SECRET }}" 
            -d "$PAYLOAD" 
            -o response_body.txt)
          
          HTTP_CODE="${RESPONSE: -3}"
          RESPONSE_BODY=$(cat response_body.txt)
          
          echo "HTTP 응답 코드: $HTTP_CODE"
          echo "응답 내용: $RESPONSE_BODY"
          
          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "✅ KV에 새 글 정보가 성공적으로 저장되었습니다!"
          else
            echo "❌ KV 저장 실패 (HTTP $HTTP_CODE)"
            echo "$RESPONSE_BODY"
            exit 1
          fi

      - name: Trigger Vercel Build Hook
        if: steps.check_new_posts.outputs.has_new_posts == 'true'
        run: |
          echo "Vercel Build Hook 트리거 중..."
          
          # Vercel Build Hook 호출
          RESPONSE=$(curl -s -w "%{http_code}" -X POST "${{ secrets.VERCEL_BUILD_HOOK_URL }}" \
            -o hook_response.txt)
          
          HTTP_CODE="${RESPONSE: -3}"
          RESPONSE_BODY=$(cat hook_response.txt)
          
          echo "HTTP 응답 코드: $HTTP_CODE"
          echo "응답 내용: $RESPONSE_BODY"
          
          if [ "$HTTP_CODE" -eq 200 ] || [ "$HTTP_CODE" -eq 201 ]; then
            echo "✅ Vercel Build Hook이 성공적으로 트리거되었습니다!"
          else
            echo "❌ Build Hook 트리거 실패 (HTTP $HTTP_CODE)"
            echo "$RESPONSE_BODY"
            exit 1
          fi

      - name: Summary
        if: always()
        run: |
          if [ "${{ steps.check_new_posts.outputs.has_new_posts }}" == "true" ]; then
            echo "📧 새 블로그 글 정보를 KV에 저장하고 배포를 트리거했습니다."
          else
            echo "📝 새로 추가된 발행 가능한 블로그 글이 없습니다."
          fi